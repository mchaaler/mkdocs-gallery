{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mkdocs-gallery \u00b6 Sphinx-Gallery features for mkdocs (no Sphinx dependency !). Do you love Sphinx-Gallery but prefer mkdocs over Sphinx for your documentation ? mkdocs-gallery was written for you ;) It relies on mkdocs-material to get the most of mkdocs, so that your galleries look nice ! Installing \u00b6 > pip install mkdocs-gallery Usage \u00b6 1. Create a source gallery folder \u00b6 First, create a folder that will contain your gallery examples, for example docs/examples/ . It will be referenced by the examples_dirs configuration option . Then in this folder, you may add a readme. This readme should be written in markdown, be named README or readme or Readme , and have a .md or .txt extension. Note: the folder can be located inside the usual mkdocs source folder: docs/ # base mkdocs source directory \u2514\u2500\u2500 examples/ # base 'Gallery of Examples' directory \u2514\u2500\u2500 README.md or not examples/ # base 'Gallery of Examples' directory \u2514\u2500\u2500 README.md docs/ # base mkdocs source directory 2. Configure mkdocs \u00b6 a. Basics \u00b6 Simply add the following configuration to you mkdocs.yml : theme : material # This theme is mandatory for now, see below plugins : - gallery : examples_dirs : docs/examples # path to your example scripts gallery_dirs : docs/generated/gallery # where to save generated gallery # ... (other options) - search # make sure the search plugin is still enabled Most sphinx-gallery configuration options are supported and can be configured in here after examples_dirs and gallery_dirs . All paths should be relative to the mkdocs.yml file. You can look at the configuration used to generate this site as an example: mkdocs.yml . Caution mkdocs-gallery currently requires that you use the material theme from mkdocs-material to render properly. You may wish to try other themes to see what is missing to support them: actually, only a few things concerning buttons and icons do not seem to currently work properly. Note The search plugin is not related with mkdocs-gallery. It is activated by default in mkdocs but if you edit the plugins configuration you have to add it explicitly again. Once you've done this, the corresponding gallery will be created the next time you call mkdocs build or mkdocs serve . However the gallery will not yet appear in the table of contents (mkdocs nav ). For this you should add the generated gallery to the nav in mkdocs.yml : nav : - Home : index.md - generated/gallery # This node will automatically be named and have sub-nodes. When the root folder or the root index.md of a gallery is added to the nav, it will be automatically populated with sub-nodes for all examples and subgalleries. If you prefer to select examples or subgalleries to include one by one, you may refer to any of them directly in the nav. In that case, no nav automation will be performed - just the usual explicit mkdocs nav. You may wish to change the gallery's names for display and still benefit from this automation: nav : - Home : index.md - My Gallery : generated/gallery # This node will automatically be named and have sub-nodes. See this site's config for an example. See also mkdocs configuration for general information about the mkdocs.yml file. b. Advanced \u00b6 You may wish to use the special conf_script option to create the base configuration using a python script, like what was done in Sphinx-gallery: plugins : - gallery : conf_script : docs/gallery_conf.py # ... other options can still be added here The python script should be executable without error, and at the end of execution should contain a conf variable defined at the module level. For example this is a valid script: from mkdocs_gallery.gen_gallery import DefaultResetArgv conf = { 'reset_argv' : DefaultResetArgv (), } You can set options both in the script and in the yaml. In case of duplicates, the yaml options override the script-defined ones. 3. Add gallery examples \u00b6 Gallery examples are structured the same way as in sphinx-gallery , with two major differences: All comment blocks should be written using Markdown instead of rST. No sphinx directive is supported: all markdown directives should be supported by mkdocs , by one of its activated plugins or by a base markdown extension (see note below). examples/ # base 'Gallery of Examples' directory \u251c\u2500\u2500 README.md \u251c\u2500\u2500 <.py files> \u2514\u2500\u2500 subgallery_1/ # generates the 'No image output examples' sub-gallery \u251c\u2500\u2500 README.md \u2514\u2500\u2500 <.py files> 4. Examples \u00b6 The entire original gallery of examples from sphinx-gallery is being ported here (work in progress). You may wish to check it out in order to see how each technical aspect translates in the mkdocs world. You can look at the configuration used to generate it here: mkdocs.yml . 5. Mkdocs \"serve\" mode \u00b6 mkdocs-gallery supports the mkdocs dev-server mkdocs serve so that you can edit your documentation with live feedback ! As soon as you modify an example file, it will rebuild the documentation and notify your browser. The examples that did not change will be automatically skipped (based on md5, identical to sphinx-gallery). See mkdocs documentation for details. 6. Make your examples shine ! \u00b6 The following mkdocs plugins and extensions are automatically activated - you may therefore use them in your markdown blocks without changing your mkdocs.yml configuration: mkdocs-material mkdocs plugin: make sure you check this one out ! navigation.indexes in the material theme. This is used for the gallery readme pages to be selectible in the nav without creating an extra entry (see left pane). icons + emojis All no-conf features are there too, for example support for \\(\\LaTeX\\) using Mathjax , code blocks , Admonitions etc. markdown extensions: attr_list to declare attributes such as css classes on markdown elements. admonition used to add notes. pymdownx.details to create foldable notes such as this one. pymdownx.highlight pymdownx.inlinehilite pymdownx.superfences pymdownx.snippets pymdownx.emoji configured with the catalog from mkdocs-material (see above) See Also \u00b6 sphinx-gallery mkdocs mkdocs-material PyMdown Extensions Others \u00b6 Do you like this library ? You might also like smarie's other python libraries Want to contribute ? \u00b6 Details on the github page: https://github.com/smarie/mkdocs-gallery","title":"Home"},{"location":"#mkdocs-gallery","text":"Sphinx-Gallery features for mkdocs (no Sphinx dependency !). Do you love Sphinx-Gallery but prefer mkdocs over Sphinx for your documentation ? mkdocs-gallery was written for you ;) It relies on mkdocs-material to get the most of mkdocs, so that your galleries look nice !","title":"mkdocs-gallery"},{"location":"#installing","text":"> pip install mkdocs-gallery","title":"Installing"},{"location":"#usage","text":"","title":"Usage"},{"location":"#1-create-a-source-gallery-folder","text":"First, create a folder that will contain your gallery examples, for example docs/examples/ . It will be referenced by the examples_dirs configuration option . Then in this folder, you may add a readme. This readme should be written in markdown, be named README or readme or Readme , and have a .md or .txt extension. Note: the folder can be located inside the usual mkdocs source folder: docs/ # base mkdocs source directory \u2514\u2500\u2500 examples/ # base 'Gallery of Examples' directory \u2514\u2500\u2500 README.md or not examples/ # base 'Gallery of Examples' directory \u2514\u2500\u2500 README.md docs/ # base mkdocs source directory","title":"1. Create a source gallery folder"},{"location":"#2-configure-mkdocs","text":"","title":"2. Configure mkdocs"},{"location":"#a-basics","text":"Simply add the following configuration to you mkdocs.yml : theme : material # This theme is mandatory for now, see below plugins : - gallery : examples_dirs : docs/examples # path to your example scripts gallery_dirs : docs/generated/gallery # where to save generated gallery # ... (other options) - search # make sure the search plugin is still enabled Most sphinx-gallery configuration options are supported and can be configured in here after examples_dirs and gallery_dirs . All paths should be relative to the mkdocs.yml file. You can look at the configuration used to generate this site as an example: mkdocs.yml . Caution mkdocs-gallery currently requires that you use the material theme from mkdocs-material to render properly. You may wish to try other themes to see what is missing to support them: actually, only a few things concerning buttons and icons do not seem to currently work properly. Note The search plugin is not related with mkdocs-gallery. It is activated by default in mkdocs but if you edit the plugins configuration you have to add it explicitly again. Once you've done this, the corresponding gallery will be created the next time you call mkdocs build or mkdocs serve . However the gallery will not yet appear in the table of contents (mkdocs nav ). For this you should add the generated gallery to the nav in mkdocs.yml : nav : - Home : index.md - generated/gallery # This node will automatically be named and have sub-nodes. When the root folder or the root index.md of a gallery is added to the nav, it will be automatically populated with sub-nodes for all examples and subgalleries. If you prefer to select examples or subgalleries to include one by one, you may refer to any of them directly in the nav. In that case, no nav automation will be performed - just the usual explicit mkdocs nav. You may wish to change the gallery's names for display and still benefit from this automation: nav : - Home : index.md - My Gallery : generated/gallery # This node will automatically be named and have sub-nodes. See this site's config for an example. See also mkdocs configuration for general information about the mkdocs.yml file.","title":"a. Basics"},{"location":"#b-advanced","text":"You may wish to use the special conf_script option to create the base configuration using a python script, like what was done in Sphinx-gallery: plugins : - gallery : conf_script : docs/gallery_conf.py # ... other options can still be added here The python script should be executable without error, and at the end of execution should contain a conf variable defined at the module level. For example this is a valid script: from mkdocs_gallery.gen_gallery import DefaultResetArgv conf = { 'reset_argv' : DefaultResetArgv (), } You can set options both in the script and in the yaml. In case of duplicates, the yaml options override the script-defined ones.","title":"b. Advanced"},{"location":"#3-add-gallery-examples","text":"Gallery examples are structured the same way as in sphinx-gallery , with two major differences: All comment blocks should be written using Markdown instead of rST. No sphinx directive is supported: all markdown directives should be supported by mkdocs , by one of its activated plugins or by a base markdown extension (see note below). examples/ # base 'Gallery of Examples' directory \u251c\u2500\u2500 README.md \u251c\u2500\u2500 <.py files> \u2514\u2500\u2500 subgallery_1/ # generates the 'No image output examples' sub-gallery \u251c\u2500\u2500 README.md \u2514\u2500\u2500 <.py files>","title":"3. Add gallery examples"},{"location":"#4-examples","text":"The entire original gallery of examples from sphinx-gallery is being ported here (work in progress). You may wish to check it out in order to see how each technical aspect translates in the mkdocs world. You can look at the configuration used to generate it here: mkdocs.yml .","title":"4. Examples"},{"location":"#5-mkdocs-serve-mode","text":"mkdocs-gallery supports the mkdocs dev-server mkdocs serve so that you can edit your documentation with live feedback ! As soon as you modify an example file, it will rebuild the documentation and notify your browser. The examples that did not change will be automatically skipped (based on md5, identical to sphinx-gallery). See mkdocs documentation for details.","title":"5. Mkdocs \"serve\" mode"},{"location":"#6-make-your-examples-shine","text":"The following mkdocs plugins and extensions are automatically activated - you may therefore use them in your markdown blocks without changing your mkdocs.yml configuration: mkdocs-material mkdocs plugin: make sure you check this one out ! navigation.indexes in the material theme. This is used for the gallery readme pages to be selectible in the nav without creating an extra entry (see left pane). icons + emojis All no-conf features are there too, for example support for \\(\\LaTeX\\) using Mathjax , code blocks , Admonitions etc. markdown extensions: attr_list to declare attributes such as css classes on markdown elements. admonition used to add notes. pymdownx.details to create foldable notes such as this one. pymdownx.highlight pymdownx.inlinehilite pymdownx.superfences pymdownx.snippets pymdownx.emoji configured with the catalog from mkdocs-material (see above)","title":"6. Make your examples shine !"},{"location":"#see-also","text":"sphinx-gallery mkdocs mkdocs-material PyMdown Extensions","title":"See Also"},{"location":"#others","text":"Do you like this library ? You might also like smarie's other python libraries","title":"Others"},{"location":"#want-to-contribute","text":"Details on the github page: https://github.com/smarie/mkdocs-gallery","title":"Want to contribute ?"},{"location":"changelog/","text":"Changelog \u00b6 0.5.0 - First public working release \u00b6 Initial release with: Basic features: pages generation with markdown-based gallery examples. Currently only the material theme renders correctly download buttons (both on each example and on the summaries) and page header link to the downloads section subgalleries gallery synthesis with proper icons and subgalleries auto inclusion in the ToC (nav) with support for the section index pages feature working mkdocs serve : correctly ignoring generated files to avoid infinite build loop working mkdocs.yml configuration for most options New option conf_script to configure via a script as in Sphinx-gallery. All gallery examples from Sphinx-Gallery successfully translated, in particular: LaTeX support works Refactoring: Using pathlib all over the place Using f-string whenever possible Object-oriented approach for configuration and dir/file names used in the generated files.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#050-first-public-working-release","text":"Initial release with: Basic features: pages generation with markdown-based gallery examples. Currently only the material theme renders correctly download buttons (both on each example and on the summaries) and page header link to the downloads section subgalleries gallery synthesis with proper icons and subgalleries auto inclusion in the ToC (nav) with support for the section index pages feature working mkdocs serve : correctly ignoring generated files to avoid infinite build loop working mkdocs.yml configuration for most options New option conf_script to configure via a script as in Sphinx-gallery. All gallery examples from Sphinx-Gallery successfully translated, in particular: LaTeX support works Refactoring: Using pathlib all over the place Using f-string whenever possible Object-oriented approach for configuration and dir/file names used in the generated files.","title":"0.5.0 - First public working release"},{"location":"long_description/","text":"mkdocs-gallery \u00b6 Sphinx-Gallery features for mkdocs (no Sphinx dependency !). Do you love Sphinx-Gallery but prefer mkdocs over Sphinx for your documentation ? mkdocs-gallery was written for you ;) It relies on mkdocs-material to get the most of mkdocs, so that your galleries look nice! The documentation for users is available here: https://smarie.github.io/mkdocs-gallery/ A readme for developers is available here: https://github.com/smarie/mkdocs-gallery","title":"mkdocs-gallery"},{"location":"long_description/#mkdocs-gallery","text":"Sphinx-Gallery features for mkdocs (no Sphinx dependency !). Do you love Sphinx-Gallery but prefer mkdocs over Sphinx for your documentation ? mkdocs-gallery was written for you ;) It relies on mkdocs-material to get the most of mkdocs, so that your galleries look nice! The documentation for users is available here: https://smarie.github.io/mkdocs-gallery/ A readme for developers is available here: https://github.com/smarie/mkdocs-gallery","title":"mkdocs-gallery"},{"location":"examples/","text":"Gallery of Examples \u00b6 This page consists of the 'General example' gallery and a sub-gallery, 'No image output examples'. This sub-gallery is generated from a sub-directory within the general examples directory. The file structure of this gallery looks like this: examples/ # base 'Gallery of Examples' directory \u251c\u2500\u2500 README.txt \u251c\u2500\u2500 <.py files> \u2514\u2500\u2500 no_output/ # generates the 'No image output examples' sub-gallery \u251c\u2500\u2500 README.txt \u2514\u2500\u2500 <.py files> General examples \u00b6 This gallery consists of introductory examples and examples demonstrating specific features of Mkdocs-Gallery.","title":"Gallery of Examples"},{"location":"examples/#gallery-of-examples","text":"This page consists of the 'General example' gallery and a sub-gallery, 'No image output examples'. This sub-gallery is generated from a sub-directory within the general examples directory. The file structure of this gallery looks like this: examples/ # base 'Gallery of Examples' directory \u251c\u2500\u2500 README.txt \u251c\u2500\u2500 <.py files> \u2514\u2500\u2500 no_output/ # generates the 'No image output examples' sub-gallery \u251c\u2500\u2500 README.txt \u2514\u2500\u2500 <.py files>","title":"Gallery of Examples"},{"location":"examples/#general-examples","text":"This gallery consists of introductory examples and examples demonstrating specific features of Mkdocs-Gallery.","title":"General examples"},{"location":"examples/no_output/","text":"No image output examples \u00b6 This section gathers examples which don't produce any figures. Some examples only output to standard output, others demonstrate how Mkdocs-Gallery handles examples with errors.","title":"Index"},{"location":"examples/no_output/#no-image-output-examples","text":"This section gathers examples which don't produce any figures. Some examples only output to standard output, others demonstrate how Mkdocs-Gallery handles examples with errors.","title":"No image output examples"},{"location":"generated/gallery/","text":"Gallery of Examples \u00b6 This page consists of the 'General example' gallery and a sub-gallery, 'No image output examples'. This sub-gallery is generated from a sub-directory within the general examples directory. The file structure of this gallery looks like this: examples/ # base 'Gallery of Examples' directory \u251c\u2500\u2500 README.txt \u251c\u2500\u2500 <.py files> \u2514\u2500\u2500 no_output/ # generates the 'No image output examples' sub-gallery \u251c\u2500\u2500 README.txt \u2514\u2500\u2500 <.py files> General examples \u00b6 This gallery consists of introductory examples and examples demonstrating specific features of Mkdocs-Gallery. Local module Introductory example - Plotting sin Plotting the exponential function No image output examples \u00b6 This section gathers examples which don't produce any figures. Some examples only output to standard output, others demonstrate how Mkdocs-Gallery handles examples with errors. A short Python script Example that fails to execute Constrained Text output frame SyntaxError Download all examples in Python source code: gallery_python.zip Download all examples in Jupyter notebooks: gallery_jupyter.zip Gallery generated by mkdocs-gallery","title":"Gallery of examples"},{"location":"generated/gallery/#gallery-of-examples","text":"This page consists of the 'General example' gallery and a sub-gallery, 'No image output examples'. This sub-gallery is generated from a sub-directory within the general examples directory. The file structure of this gallery looks like this: examples/ # base 'Gallery of Examples' directory \u251c\u2500\u2500 README.txt \u251c\u2500\u2500 <.py files> \u2514\u2500\u2500 no_output/ # generates the 'No image output examples' sub-gallery \u251c\u2500\u2500 README.txt \u2514\u2500\u2500 <.py files>","title":"Gallery of Examples"},{"location":"generated/gallery/#general-examples","text":"This gallery consists of introductory examples and examples demonstrating specific features of Mkdocs-Gallery. Local module Introductory example - Plotting sin Plotting the exponential function","title":"General examples"},{"location":"generated/gallery/#no-image-output-examples","text":"This section gathers examples which don't produce any figures. Some examples only output to standard output, others demonstrate how Mkdocs-Gallery handles examples with errors. A short Python script Example that fails to execute Constrained Text output frame SyntaxError Download all examples in Python source code: gallery_python.zip Download all examples in Jupyter notebooks: gallery_jupyter.zip Gallery generated by mkdocs-gallery","title":"No image output examples"},{"location":"generated/gallery/local_module/","text":"Note Click here to download the full example code Local module \u00b6 This example demonstrates how local modules can be imported. This module is imported in the example Plotting the exponential function . N = 100 Total running time of the script: ( 0 minutes 0.000 seconds) Download Python source code: local_module.py Download Jupyter notebook: local_module.ipynb Gallery generated by mkdocs-gallery","title":"Local module"},{"location":"generated/gallery/local_module/#local-module","text":"This example demonstrates how local modules can be imported. This module is imported in the example Plotting the exponential function . N = 100 Total running time of the script: ( 0 minutes 0.000 seconds) Download Python source code: local_module.py Download Jupyter notebook: local_module.ipynb Gallery generated by mkdocs-gallery","title":"Local module"},{"location":"generated/gallery/mg_execution_times/","text":"Computation times \u00b6 00:00.329 total execution time for generated_gallery files: +-------------------------------------------------------------------+-----------+--------+ | plot_0_sin (docs/examples/plot_0_sin.py) | 00:00.184 | 0.0 MB | +-------------------------------------------------------------------+-----------+--------+ | plot_1_exp (docs/examples/plot_1_exp.py) | 00:00.145 | 0.0 MB | +-------------------------------------------------------------------+-----------+--------+ | local_module (docs/examples/local_module.py) | 00:00.000 | 0.0 MB | +-------------------------------------------------------------------+-----------+--------+","title":"Computation times"},{"location":"generated/gallery/mg_execution_times/#computation-times","text":"00:00.329 total execution time for generated_gallery files: +-------------------------------------------------------------------+-----------+--------+ | plot_0_sin (docs/examples/plot_0_sin.py) | 00:00.184 | 0.0 MB | +-------------------------------------------------------------------+-----------+--------+ | plot_1_exp (docs/examples/plot_1_exp.py) | 00:00.145 | 0.0 MB | +-------------------------------------------------------------------+-----------+--------+ | local_module (docs/examples/local_module.py) | 00:00.000 | 0.0 MB | +-------------------------------------------------------------------+-----------+--------+","title":"Computation times"},{"location":"generated/gallery/plot_0_sin/","text":"Note Click here to download the full example code Introductory example - Plotting sin \u00b6 This is a general example demonstrating a Matplotlib plot output, embedded Markdown, the use of math notation and cross-linking to other examples. It would be useful to compare the source Python file with the output below. Source files for gallery examples should start with a triple-quoted header docstring. Anything before the docstring is ignored by Mkdocs-Gallery and will not appear in the rendered output, nor will it be executed. This docstring requires a Markdown header, which is used as the title of the example and to correctly build cross-referencing links. Code and embedded Markdown text blocks follow the docstring. The first block immediately after the docstring is deemed a code block, by default, unless you specify it to be a text block using a line of # 's or #%% (see below). All code blocks get executed by Mkdocs-Gallery and any output, including plots will be captured. Typically, code and text blocks are interspersed to provide narrative explanations of what the code is doing or interpretations of code output. Mathematical expressions can be included as LaTeX, and will be rendered with MathJax. See mkdocs-material for configuration of your mkdocs.yml as well as for syntax details. For example, we are about to plot the following function: \\[ x \\rightarrow \\sin(x) \\] Here the function \\(\\sin\\) is evaluated at each point the variable \\(x\\) is defined. When including LaTeX in a Python string, ensure that you escape the backslashes or use a raw docstring. You do not need to do this in text blocks (see below). import numpy as np import matplotlib.pyplot as plt x = np . linspace ( 0 , 2 * np . pi , 100 ) y = np . sin ( x ) plt . plot ( x , y ) plt . xlabel ( r '$x$' ) plt . ylabel ( r '$\\sin(x)$' ) # To avoid matplotlib text output plt . show () To include embedded Markdown, use a line of >= 20 # 's or #%% between your Markdown and your code (see syntax ). This separates your example into distinct text and code blocks. You can continue writing code below the embedded Markdown text block: print ( 'This example shows a sin plot!' ) Out: This example shows a sin plot! LaTeX syntax in the text blocks does not require backslashes to be escaped: \\[ \\sin \\] Cross referencing \u00b6 You can refer to an example from any part of the documentation, including from other examples. However as opposed to what happens in Sphinx, there is no possibility to create unique identifiers in MkDocs. So you should use relative paths. First, let's note that the markdown for the current file is located at docs/generated/gallery/plot_1_sin.md . This is because the configuration for this gallery in mkdocs.yml states that the examples/ gallery should be generated in the generated/gallery folder. Below, the example we want to cross-reference is the 'SyntaxError' example, located in the no_output subgallery of the examples gallery. The associated generated file is docs/generated/gallery/no_output/plot_syntaxerror.md . docs/ \u2514\u2500\u2500 generated/ \u2514\u2500\u2500 gallery/ \u251c\u2500\u2500 no_output/ \u2502 \u251c\u2500\u2500 plot_syntaxerror.md # example to reference \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 plot_1_sin.md # current example \u2514\u2500\u2500 ... We can therefore cross-link to the example using [SyntaxError](./no_output/plot_syntaxerror.md) : SyntaxError . Of course as for normal documents, we can leverage plugins (e.g. mkdocs-material) and extensions. So here we use admonitions : to create a nice \"see also\" note: See also See SyntaxError for an example with an error. Total running time of the script: ( 0 minutes 0.184 seconds) Download Python source code: plot_0_sin.py Download Jupyter notebook: plot_0_sin.ipynb Gallery generated by mkdocs-gallery","title":"Introductory example - Plotting sin"},{"location":"generated/gallery/plot_0_sin/#introductory-example-plotting-sin","text":"This is a general example demonstrating a Matplotlib plot output, embedded Markdown, the use of math notation and cross-linking to other examples. It would be useful to compare the source Python file with the output below. Source files for gallery examples should start with a triple-quoted header docstring. Anything before the docstring is ignored by Mkdocs-Gallery and will not appear in the rendered output, nor will it be executed. This docstring requires a Markdown header, which is used as the title of the example and to correctly build cross-referencing links. Code and embedded Markdown text blocks follow the docstring. The first block immediately after the docstring is deemed a code block, by default, unless you specify it to be a text block using a line of # 's or #%% (see below). All code blocks get executed by Mkdocs-Gallery and any output, including plots will be captured. Typically, code and text blocks are interspersed to provide narrative explanations of what the code is doing or interpretations of code output. Mathematical expressions can be included as LaTeX, and will be rendered with MathJax. See mkdocs-material for configuration of your mkdocs.yml as well as for syntax details. For example, we are about to plot the following function: \\[ x \\rightarrow \\sin(x) \\] Here the function \\(\\sin\\) is evaluated at each point the variable \\(x\\) is defined. When including LaTeX in a Python string, ensure that you escape the backslashes or use a raw docstring. You do not need to do this in text blocks (see below). import numpy as np import matplotlib.pyplot as plt x = np . linspace ( 0 , 2 * np . pi , 100 ) y = np . sin ( x ) plt . plot ( x , y ) plt . xlabel ( r '$x$' ) plt . ylabel ( r '$\\sin(x)$' ) # To avoid matplotlib text output plt . show () To include embedded Markdown, use a line of >= 20 # 's or #%% between your Markdown and your code (see syntax ). This separates your example into distinct text and code blocks. You can continue writing code below the embedded Markdown text block: print ( 'This example shows a sin plot!' ) Out: This example shows a sin plot! LaTeX syntax in the text blocks does not require backslashes to be escaped: \\[ \\sin \\]","title":"Introductory example - Plotting sin"},{"location":"generated/gallery/plot_0_sin/#cross-referencing","text":"You can refer to an example from any part of the documentation, including from other examples. However as opposed to what happens in Sphinx, there is no possibility to create unique identifiers in MkDocs. So you should use relative paths. First, let's note that the markdown for the current file is located at docs/generated/gallery/plot_1_sin.md . This is because the configuration for this gallery in mkdocs.yml states that the examples/ gallery should be generated in the generated/gallery folder. Below, the example we want to cross-reference is the 'SyntaxError' example, located in the no_output subgallery of the examples gallery. The associated generated file is docs/generated/gallery/no_output/plot_syntaxerror.md . docs/ \u2514\u2500\u2500 generated/ \u2514\u2500\u2500 gallery/ \u251c\u2500\u2500 no_output/ \u2502 \u251c\u2500\u2500 plot_syntaxerror.md # example to reference \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 plot_1_sin.md # current example \u2514\u2500\u2500 ... We can therefore cross-link to the example using [SyntaxError](./no_output/plot_syntaxerror.md) : SyntaxError . Of course as for normal documents, we can leverage plugins (e.g. mkdocs-material) and extensions. So here we use admonitions : to create a nice \"see also\" note: See also See SyntaxError for an example with an error. Total running time of the script: ( 0 minutes 0.184 seconds) Download Python source code: plot_0_sin.py Download Jupyter notebook: plot_0_sin.ipynb Gallery generated by mkdocs-gallery","title":"Cross referencing"},{"location":"generated/gallery/plot_1_exp/","text":"Note Click here to download the full example code Plotting the exponential function \u00b6 This example demonstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable N from the example 'Local module' (file local_module.py ) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block. # Code source: \u00d3scar N\u00e1jera # License: BSD 3 clause import numpy as np import matplotlib.pyplot as plt # You can use modules local to the example being run, here we import # N from local_module from local_module import N # = 100 def main (): x = np . linspace ( - 1 , 2 , N ) y = np . exp ( x ) plt . figure () plt . plot ( x , y ) plt . xlabel ( '$x$' ) plt . ylabel ( '$\\exp(x)$' ) plt . title ( 'Exponential function' ) plt . figure () plt . plot ( x , - np . exp ( - x )) plt . xlabel ( '$x$' ) plt . ylabel ( '$-\\exp(-x)$' ) plt . title ( 'Negative exponential \\n function' ) # To avoid matplotlib text output plt . show () if __name__ == '__main__' : main () Total running time of the script: ( 0 minutes 0.145 seconds) Download Python source code: plot_1_exp.py Download Jupyter notebook: plot_1_exp.ipynb Gallery generated by mkdocs-gallery","title":"Plotting the exponential function"},{"location":"generated/gallery/plot_1_exp/#plotting-the-exponential-function","text":"This example demonstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable N from the example 'Local module' (file local_module.py ) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block. # Code source: \u00d3scar N\u00e1jera # License: BSD 3 clause import numpy as np import matplotlib.pyplot as plt # You can use modules local to the example being run, here we import # N from local_module from local_module import N # = 100 def main (): x = np . linspace ( - 1 , 2 , N ) y = np . exp ( x ) plt . figure () plt . plot ( x , y ) plt . xlabel ( '$x$' ) plt . ylabel ( '$\\exp(x)$' ) plt . title ( 'Exponential function' ) plt . figure () plt . plot ( x , - np . exp ( - x )) plt . xlabel ( '$x$' ) plt . ylabel ( '$-\\exp(-x)$' ) plt . title ( 'Negative exponential \\n function' ) # To avoid matplotlib text output plt . show () if __name__ == '__main__' : main () Total running time of the script: ( 0 minutes 0.145 seconds) Download Python source code: plot_1_exp.py Download Jupyter notebook: plot_1_exp.ipynb Gallery generated by mkdocs-gallery","title":"Plotting the exponential function"},{"location":"generated/gallery/no_output/just_code/","text":"Note Click here to download the full example code A short Python script \u00b6 This demonstrates an example .py file that is not executed when gallery is generated (see Parsing and executing examples via matching patterns ) but nevertheless gets included as an example. Note that no output is captured as this file is not executed. # Code source: \u00d3scar N\u00e1jera # License: BSD 3 clause from __future__ import print_function print ([ i for i in range ( 10 )]) Total running time of the script: ( 0 minutes 0.000 seconds) Download Python source code: just_code.py Download Jupyter notebook: just_code.ipynb Gallery generated by mkdocs-gallery","title":"A short Python script"},{"location":"generated/gallery/no_output/just_code/#a-short-python-script","text":"This demonstrates an example .py file that is not executed when gallery is generated (see Parsing and executing examples via matching patterns ) but nevertheless gets included as an example. Note that no output is captured as this file is not executed. # Code source: \u00d3scar N\u00e1jera # License: BSD 3 clause from __future__ import print_function print ([ i for i in range ( 10 )]) Total running time of the script: ( 0 minutes 0.000 seconds) Download Python source code: just_code.py Download Jupyter notebook: just_code.ipynb Gallery generated by mkdocs-gallery","title":"A short Python script"},{"location":"generated/gallery/no_output/mg_execution_times/","text":"Computation times \u00b6 00:00.066 total execution time for generated_gallery_no_output files: +-----------------------------------------------------------------------------------------+-----------+--------+ | plot_raise (docs/examples/no_output/plot_raise.py) | 00:00.064 | 0.0 MB | +-----------------------------------------------------------------------------------------+-----------+--------+ | plot_strings (docs/examples/no_output/plot_strings.py) | 00:00.001 | 0.0 MB | +-----------------------------------------------------------------------------------------+-----------+--------+ | plot_syntaxerror (docs/examples/no_output/plot_syntaxerror.py) | 00:00.001 | 0.0 MB | +-----------------------------------------------------------------------------------------+-----------+--------+ | just_code (docs/examples/no_output/just_code.py) | 00:00.000 | 0.0 MB | +-----------------------------------------------------------------------------------------+-----------+--------+","title":"Computation times"},{"location":"generated/gallery/no_output/mg_execution_times/#computation-times","text":"00:00.066 total execution time for generated_gallery_no_output files: +-----------------------------------------------------------------------------------------+-----------+--------+ | plot_raise (docs/examples/no_output/plot_raise.py) | 00:00.064 | 0.0 MB | +-----------------------------------------------------------------------------------------+-----------+--------+ | plot_strings (docs/examples/no_output/plot_strings.py) | 00:00.001 | 0.0 MB | +-----------------------------------------------------------------------------------------+-----------+--------+ | plot_syntaxerror (docs/examples/no_output/plot_syntaxerror.py) | 00:00.001 | 0.0 MB | +-----------------------------------------------------------------------------------------+-----------+--------+ | just_code (docs/examples/no_output/just_code.py) | 00:00.000 | 0.0 MB | +-----------------------------------------------------------------------------------------+-----------+--------+","title":"Computation times"},{"location":"generated/gallery/no_output/plot_raise/","text":"Note Click here to download the full example code Example that fails to execute \u00b6 This example demonstrates a code block that raises an error and how any code blocks that follow are not executed. When scripts fail, their gallery thumbnail is replaced with the broken image stamp. This allows easy identification in the gallery display. You will also get the python traceback of the failed code block. # Code source: \u00d3scar N\u00e1jera # License: BSD 3 clause # sphinx_gallery_line_numbers = True import numpy as np import matplotlib.pyplot as plt plt . pcolormesh ( np . random . randn ( 100 , 100 )) Out: <matplotlib.collections.QuadMesh object at 0x7fca1d885ad0> This next block will raise a NameError iae Traceback (most recent call last): File \"/home/runner/work/mkdocs-gallery/mkdocs-gallery/docs/examples/no_output/plot_raise.py\" , line 27 , in <module> iae NameError : name 'iae' is not defined Sphinx gallery will stop executing the remaining code blocks after the exception has occurred in the example script. Nevertheless the html will still render all the example annotated text and code blocks, but no output will be shown. Here is another error raising block but will not be executed plt . plot ( 'Strings are not a valid argument for the plot function' ) Total running time of the script: ( 0 minutes 0.064 seconds) Download Python source code: plot_raise.py Download Jupyter notebook: plot_raise.ipynb Gallery generated by mkdocs-gallery","title":"Example that fails to execute"},{"location":"generated/gallery/no_output/plot_raise/#example-that-fails-to-execute","text":"This example demonstrates a code block that raises an error and how any code blocks that follow are not executed. When scripts fail, their gallery thumbnail is replaced with the broken image stamp. This allows easy identification in the gallery display. You will also get the python traceback of the failed code block. # Code source: \u00d3scar N\u00e1jera # License: BSD 3 clause # sphinx_gallery_line_numbers = True import numpy as np import matplotlib.pyplot as plt plt . pcolormesh ( np . random . randn ( 100 , 100 )) Out: <matplotlib.collections.QuadMesh object at 0x7fca1d885ad0> This next block will raise a NameError iae Traceback (most recent call last): File \"/home/runner/work/mkdocs-gallery/mkdocs-gallery/docs/examples/no_output/plot_raise.py\" , line 27 , in <module> iae NameError : name 'iae' is not defined Sphinx gallery will stop executing the remaining code blocks after the exception has occurred in the example script. Nevertheless the html will still render all the example annotated text and code blocks, but no output will be shown. Here is another error raising block but will not be executed plt . plot ( 'Strings are not a valid argument for the plot function' ) Total running time of the script: ( 0 minutes 0.064 seconds) Download Python source code: plot_raise.py Download Jupyter notebook: plot_raise.ipynb Gallery generated by mkdocs-gallery","title":"Example that fails to execute"},{"location":"generated/gallery/no_output/plot_strings/","text":"Note Click here to download the full example code Constrained Text output frame \u00b6 This example captures the standard output and includes it in the example. If output is too long it becomes automatically framed into a text area. TODO fix it, see #7 # Code source: \u00d3scar N\u00e1jera # License: BSD 3 clause print ( 'This is a long test Output \\n ' * 50 ) Out: This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output One line out print ( 'one line out' ) Out: one line out Total running time of the script: ( 0 minutes 0.001 seconds) Download Python source code: plot_strings.py Download Jupyter notebook: plot_strings.ipynb Gallery generated by mkdocs-gallery","title":"Constrained Text output frame"},{"location":"generated/gallery/no_output/plot_strings/#constrained-text-output-frame","text":"This example captures the standard output and includes it in the example. If output is too long it becomes automatically framed into a text area. TODO fix it, see #7 # Code source: \u00d3scar N\u00e1jera # License: BSD 3 clause print ( 'This is a long test Output \\n ' * 50 ) Out: This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output This is a long test Output One line out print ( 'one line out' ) Out: one line out Total running time of the script: ( 0 minutes 0.001 seconds) Download Python source code: plot_strings.py Download Jupyter notebook: plot_strings.ipynb Gallery generated by mkdocs-gallery","title":"Constrained Text output frame"},{"location":"generated/gallery/no_output/plot_syntaxerror/","text":"Note Click here to download the full example code SyntaxError \u00b6 Example script with invalid Python syntax Traceback (most recent call last): File \"/home/runner/work/mkdocs-gallery/mkdocs-gallery/docs/examples/no_output/plot_syntaxerror.py\" , line 13 Invalid Python code ^ SyntaxError : invalid syntax # -*- coding: utf-8 -*- \"\"\" Example with SyntaxError ======================== Sphinx-Gallery uses Python's AST parser, thus you need to have written valid python code for Sphinx-Gallery to parse it. If your script has a SyntaxError you'll be presented the traceback and the original code. \"\"\" # Code source: \u00d3scar N\u00e1jera # License: BSD 3 clause Invalid Python code Total running time of the script: ( 0 minutes 0.001 seconds) Download Python source code: plot_syntaxerror.py Download Jupyter notebook: plot_syntaxerror.ipynb Gallery generated by mkdocs-gallery","title":"SyntaxError"},{"location":"generated/gallery/no_output/plot_syntaxerror/#syntaxerror","text":"Example script with invalid Python syntax Traceback (most recent call last): File \"/home/runner/work/mkdocs-gallery/mkdocs-gallery/docs/examples/no_output/plot_syntaxerror.py\" , line 13 Invalid Python code ^ SyntaxError : invalid syntax # -*- coding: utf-8 -*- \"\"\" Example with SyntaxError ======================== Sphinx-Gallery uses Python's AST parser, thus you need to have written valid python code for Sphinx-Gallery to parse it. If your script has a SyntaxError you'll be presented the traceback and the original code. \"\"\" # Code source: \u00d3scar N\u00e1jera # License: BSD 3 clause Invalid Python code Total running time of the script: ( 0 minutes 0.001 seconds) Download Python source code: plot_syntaxerror.py Download Jupyter notebook: plot_syntaxerror.ipynb Gallery generated by mkdocs-gallery","title":"SyntaxError"},{"location":"generated/tutorials/","text":"Notebook style example \u00b6 You can have multiple galleries, each one for different uses. For example, one gallery of examples and a different gallery for tutorials. This gallery demonstrates the ability of Mkdocs-Gallery to transform a file with a Jupyter notebook style structure (i.e., with alternating text and code). Alternating text and code Download all examples in Python source code: tutorials_python.zip Download all examples in Jupyter notebooks: tutorials_jupyter.zip Gallery generated by mkdocs-gallery","title":"Notebook style example"},{"location":"generated/tutorials/#notebook-style-example","text":"You can have multiple galleries, each one for different uses. For example, one gallery of examples and a different gallery for tutorials. This gallery demonstrates the ability of Mkdocs-Gallery to transform a file with a Jupyter notebook style structure (i.e., with alternating text and code). Alternating text and code Download all examples in Python source code: tutorials_python.zip Download all examples in Jupyter notebooks: tutorials_jupyter.zip Gallery generated by mkdocs-gallery","title":"Notebook style example"},{"location":"generated/tutorials/mg_execution_times/","text":"Computation times \u00b6 00:00.001 total execution time for generated_tutorials files: +--------------------------------------------------------------+-----------+--------+ | plot_parse (docs/tutorials/plot_parse.py) | 00:00.001 | 0.0 MB | +--------------------------------------------------------------+-----------+--------+","title":"Computation times"},{"location":"generated/tutorials/mg_execution_times/#computation-times","text":"00:00.001 total execution time for generated_tutorials files: +--------------------------------------------------------------+-----------+--------+ | plot_parse (docs/tutorials/plot_parse.py) | 00:00.001 | 0.0 MB | +--------------------------------------------------------------+-----------+--------+","title":"Computation times"},{"location":"generated/tutorials/plot_parse/","text":"Note Click here to download the full example code Alternating text and code \u00b6 Mkdocs-Gallery is capable of transforming Python files into MD files with a notebook structure. For this to be used you need to respect some syntax rules. This example demonstrates how to alternate text and code blocks and some edge cases. It was designed to be compared with the source Python script . This is the first text block and directly follows the header docstring above. import numpy as np # You can separate code blocks using either a single line of ``#``'s # (>=20 columns), ``#%%``, or ``# %%``. For consistency, it is recommend that # you use only one of the above three 'block splitter' options in your project. A = 1 import matplotlib.pyplot as plt Block splitters allow you alternate between code and text blocks and separate sequential blocks of code (above) and text (below). A line of # 's also works for separating blocks. The above line of # 's separates the text block above from this text block. Notice however, that separated text blocks only shows as a new lines between text, in the rendered output. def dummy (): \"\"\"This should not be part of a 'text' block'\"\"\" # %% # This comment inside a code block will remain in the code block pass # this line should not be part of a 'text' block \u00b6 The above syntax makes a line cut in Sphinx. Note the space between the first # and the line of # 's. .. warning:: The next kind of comments are not supported (notice the line of # 's and the # %% start at the margin instead of being indented like above) and become too hard to escape so just don't use code like this:: def dummy2(): \"\"\"Function docstring\"\"\" #################################### # This comment # %% # and this comment inside python indentation # breaks the block structure and is not # supported dummy2 \"\"\"Free strings are not supported. They will be rendered as a code block\"\"\" Out: 'Free strings are not supported. They will be rendered as a code block' New lines can be included in your text block and the parser is capable of retaining this important whitespace to work with Sphinx. Everything after a block splitter and starting with # then one space, is interpreted by Sphinx-Gallery to be a rST text block. Keep your text block together using # and a space at the beginning of each line. rST header within text block ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ print ( 'one' ) Out: one # another way to separate code blocks shown above B = 1 Last text block. That's all folks ! .. literalinclude:: plot_parse.py Total running time of the script: ( 0 minutes 0.001 seconds) Download Python source code: plot_parse.py Download Jupyter notebook: plot_parse.ipynb Gallery generated by mkdocs-gallery","title":"Alternating text and code"},{"location":"generated/tutorials/plot_parse/#alternating-text-and-code","text":"Mkdocs-Gallery is capable of transforming Python files into MD files with a notebook structure. For this to be used you need to respect some syntax rules. This example demonstrates how to alternate text and code blocks and some edge cases. It was designed to be compared with the source Python script . This is the first text block and directly follows the header docstring above. import numpy as np # You can separate code blocks using either a single line of ``#``'s # (>=20 columns), ``#%%``, or ``# %%``. For consistency, it is recommend that # you use only one of the above three 'block splitter' options in your project. A = 1 import matplotlib.pyplot as plt Block splitters allow you alternate between code and text blocks and separate sequential blocks of code (above) and text (below). A line of # 's also works for separating blocks. The above line of # 's separates the text block above from this text block. Notice however, that separated text blocks only shows as a new lines between text, in the rendered output. def dummy (): \"\"\"This should not be part of a 'text' block'\"\"\" # %% # This comment inside a code block will remain in the code block pass # this line should not be part of a 'text' block","title":"Alternating text and code"},{"location":"generated/tutorials/plot_parse/#_1","text":"The above syntax makes a line cut in Sphinx. Note the space between the first # and the line of # 's. .. warning:: The next kind of comments are not supported (notice the line of # 's and the # %% start at the margin instead of being indented like above) and become too hard to escape so just don't use code like this:: def dummy2(): \"\"\"Function docstring\"\"\" #################################### # This comment # %% # and this comment inside python indentation # breaks the block structure and is not # supported dummy2 \"\"\"Free strings are not supported. They will be rendered as a code block\"\"\" Out: 'Free strings are not supported. They will be rendered as a code block' New lines can be included in your text block and the parser is capable of retaining this important whitespace to work with Sphinx. Everything after a block splitter and starting with # then one space, is interpreted by Sphinx-Gallery to be a rST text block. Keep your text block together using # and a space at the beginning of each line. rST header within text block ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ print ( 'one' ) Out: one # another way to separate code blocks shown above B = 1 Last text block. That's all folks ! .. literalinclude:: plot_parse.py Total running time of the script: ( 0 minutes 0.001 seconds) Download Python source code: plot_parse.py Download Jupyter notebook: plot_parse.ipynb Gallery generated by mkdocs-gallery","title":""},{"location":"tutorials/","text":"Notebook style example \u00b6 You can have multiple galleries, each one for different uses. For example, one gallery of examples and a different gallery for tutorials. This gallery demonstrates the ability of Mkdocs-Gallery to transform a file with a Jupyter notebook style structure (i.e., with alternating text and code).","title":"Index"},{"location":"tutorials/#notebook-style-example","text":"You can have multiple galleries, each one for different uses. For example, one gallery of examples and a different gallery for tutorials. This gallery demonstrates the ability of Mkdocs-Gallery to transform a file with a Jupyter notebook style structure (i.e., with alternating text and code).","title":"Notebook style example"}]}